[
	{
		"id": 944,
		"datetime": 1661723938683,
		"parent": "",
		"type": "loading",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n\r\nimport pandas as pd\r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n\r\n\r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n"
	},
	{
		"id": 6657,
		"datetime": 1661723950504,
		"parent": 944,
		"type": "processing",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n \r\nimport pandas as pd\r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n\r\n\r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n",
		"name": "Cropping videos",
		"description": "Need to crop videos before processing it"
	},
	{
		"id": 9940,
		"datetime": 1661723970730,
		"parent": 6657,
		"type": "processing",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n \r\nimport pandas as pd \r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n\r\n\r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n",
		"name": "Extracting pupil size",
		"description": "Extracting pupil size from the 4 points of the video with perimeter technique"
	},
	{
		"id": 2997,
		"datetime": 1661724019201,
		"parent": 9940,
		"type": "hypothesis",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n  \r\nimport pandas as pd \r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n\r\n\r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n",
		"name": "Computing pupil size via diameter reduces noises & outliers.",
		"description": "Computing pupil size via diameter reduces noises & outliers.",
		"results": "Reduction of noises by X% compared to previous algorithm",
		"outcome": 1
	},
	{
		"id": 1467,
		"datetime": 1661724092382,
		"parent": 2997,
		"type": "refactoring",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n  \r\nimport pandas as pd \r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n \r\n \r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n"
	},
	{
		"id": 8764,
		"datetime": 1661724107445,
		"parent": 1808,
		"type": "processing",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n  \r\nimport pandas as pd \r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n  \r\n \r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n",
		"name": "Compute eye displacement",
		"description": "For each point of the pupil, computing the eye displacement to better filter outliers."
	},
	{
		"id": 8817,
		"datetime": 1661724158318,
		"parent": 8764,
		"type": "hypothesis",
		"code-content": " # -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Thu Feb 18 10:37:53 2021\r\n\r\n@author: jujud\r\n\"\"\"\r\n  \r\nimport pandas as pd \r\nfrom tkinter import Tk, messagebox as mb\r\nfrom tkinter.filedialog import askdirectory, askopenfilename\r\nimport numpy as np\r\nimport math\r\nimport os\r\nimport re\r\nimport sys\r\n  \r\n  \r\ndef crop_videos(videos):\r\n\r\n    index = 1\r\n    for file in videos:\r\n        video = cv2.VideoCapture(file)\r\n        ok, frame = video.read()\r\n        if not ok:\r\n            print\r\n            'Cannot read video file'\r\n            sys.exit()\r\n        coords = cv2.selectROI(\"Select ROI\", frame, fromCenter=False, showCrosshair=False)\r\n\r\n        # coords = dlc.auxfun_videos.draw_bbox()\r\n        print(coords)\r\n        origin_x, origin_y = coords[:2]\r\n        width = int(coords[2])\r\n        height = int(coords[3])\r\n        print(\"Cropping video \" + str(index) + \"/\" + str(len(videos)))\r\n        cv2.destroyAllWindows()\r\n        dlc.CropVideo(file, width, height, origin_x, origin_y)\r\n        index += 1\r\n\r\n\r\ndef compute_area(pointA, pointB, pointC, pointD):\r\n    pointA.columns = ['x','y', 'likelihood']\r\n    pointB.columns = ['x','y', 'likelihood']\r\n    pointC.columns = ['x','y', 'likelihood']\r\n    pointD.columns = ['x','y', 'likelihood']\r\n    temp_r_1 = np.sqrt((pointC['x'].values - pointA['x'].values)**2 + (pointC['y'].values- pointA['y'].values)**2)/2\r\n    temp_r_2 = np.sqrt((pointD['x'].values - pointB['x'].values)**2 + (pointD['y'].values- pointB['y'].values)**2)/2\r\n    radius = (temp_r_1 + temp_r_2)/2\r\n    likelihood = (pointA['likelihood'].values + pointB['likelihood'].values + pointC['likelihood'].values + pointD['likelihood'].values) / 4\r\n    return {'value': radius * radius * math.pi, 'likelihood': likelihood}\r\n\r\n\r\ndef compute_displacement(points):\r\n    diff_points = np.zeros([len(points), len(points[0])-1])\r\n    likelihood = np.zeros([len(points), len(points[0])])\r\n    for index, point in enumerate(points):\r\n        point.columns = ['x', 'y', 'likelihood']\r\n        distance = np.sqrt((point['x'][1:].values - point['x'][0:-1].values)**2 + (point['y'][1:].values - point['y'][0:-1].values)**2)\r\n        diff_points[index] = distance\r\n        likelihood[index] = point['likelihood'].values\r\n    return {'value': np.insert(np.sum(diff_points, axis=0),0,0), 'likelihood': np.mean(likelihood, axis=0)}\r\n    \r\n\r\ndef compute_parameters_eye(file, pupil_only):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        area = compute_area(df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']])\r\n        area_eye = compute_area(df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']], df.loc[:,['x.6','y.6', 'likelihood.6']], df.loc[:,['x.7','y.7', 'likelihood.7']])\r\n        if not pupil_only:\r\n            ear = compute_displacement([df.loc[:,['x.8','y.8', 'likelihood.8']], df.loc[:,['x.9','y.9', 'likelihood.9']], df.loc[:,['x.10','y.10', 'likelihood.10']]])\r\n            snout = compute_displacement([df.loc[:,['x.11','y.11', 'likelihood.11']], df.loc[:,['x.12','y.12', 'likelihood.12']]])\r\n\r\n            return dict(zip(\r\n                ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood','SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n                [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood'], snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        return dict(zip(\r\n            ['Time', 'PupilArea', 'PupilAreaLikelihood', 'EyeArea', 'EyeAreaLikelihood'],\r\n            [time, area['value'], area['likelihood'], area_eye['value'], area_eye['likelihood']]))\r\n\r\n\r\ndef compute_parameters_body(file):\r\n    with open(file, newline='') as csvfile:\r\n        df = pd.read_csv(csvfile, skiprows=2)\r\n        time = df.index.values / 30\r\n        ear = compute_displacement([df.loc[:,['x','y', 'likelihood']], df.loc[:,['x.1','y.1', 'likelihood.1']], df.loc[:,['x.2','y.2', 'likelihood.2']], df.loc[:,['x.3','y.3', 'likelihood.3']]])\r\n        snout = compute_displacement([df.loc[:,['x.4','y.4', 'likelihood.4']], df.loc[:,['x.5','y.5', 'likelihood.5']]])\r\n\r\n        return dict(zip(\r\n            ['Time', 'SnoutDisplacement', 'SnoutDisplacementLikelihood', 'EarDisplacement', 'EarDisplacementLikelihood'],\r\n            [time, snout['value'], snout['likelihood'], ear['value'], ear['likelihood']]))\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    directory = askdirectory()\r\n    files = os.listdir(directory)\r\n    animal_files = [file.split('-')[2][0:8] for file in files if '-' in file and '.csv' in file]\r\n    animal_files = [file[6:8] + file[0:2] + file[2:4] for file in animal_files]\r\n    files = [os.path.join(directory, file) for file in files]\r\n\r\n    csv_files = [file for file in files if \".csv\" in file]\r\n    path_to_pupil_data = os.path.join(directory, 'pupil_data')\r\n    path_to_body_data = os.path.join(directory, 'body_data')\r\n    if not os.path.exists(path_to_pupil_data):\r\n        os.makedirs(path_to_pupil_data)\r\n    if not os.path.exists(path_to_body_data):\r\n        os.makedirs(path_to_body_data)\r\n\r\n    words_pattern = 'Block-[0-9]+'\r\n    for file, animal_name in zip(csv_files, animal_files):\r\n        filename = os.path.basename(file)\r\n        block_name = re.findall(words_pattern, filename, flags=re.IGNORECASE)[0]\r\n        print(block_name)\r\n        # data = compute_parameters_eye(file, pupil_only=True)\r\n        # if not os.path.exists(os.path.join(path_to_pupil_data, animal_name)):\r\n        #     os.mkdir(os.path.join(path_to_pupil_data, animal_name))\r\n        # results = pd.DataFrame(data).to_csv(os.path.join(path_to_pupil_data, animal_name, block_name + '.csv'))\r\n\r\n        data = compute_parameters_body(file)\r\n        if not os.path.exists(os.path.join(path_to_body_data, animal_name)):\r\n            os.mkdir(os.path.join(path_to_body_data, animal_name))\r\n        results = pd.DataFrame(data).to_csv(os.path.join(path_to_body_data, animal_name, block_name + '.csv'))\r\n",
		"name": "There is a correlation between neural data and pupil size",
		"description": "We expect to see an increase in firing rate and later a change in pupil size (within 0.5s).",
		"results": "No correlation found",
		"outcome": 0
	}
]